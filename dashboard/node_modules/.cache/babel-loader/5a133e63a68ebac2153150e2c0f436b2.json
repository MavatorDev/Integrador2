{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Integrador2/dashboard/src/pages/dashboard/graphs/Chartconfigactual.js\";\nimport React, { Component } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport axios from 'axios';\n\nclass Chartconfigactual extends Component {\n  constructor(props) {\n    super(props);\n    let colorBomba = '#77FF33';\n\n    if (this.props.colorBomba != null) {\n      colorBomba = this.props.colorBomba;\n    }\n\n    this.state = {\n      chartData: {\n        labels: ['Potencia actual (%)'],\n        datasets: [{\n          data: [100, 100 - 100],\n          backgroundColor: [colorBomba, '#CBCBCB'],\n          hoverBackgroundColor: [colorBomba, '#CBCBCB']\n        }]\n      }\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://54.90.124.184:8000/api/solutions/').then(res => {\n      if (this.props.bomba == \"bomb1\") {\n        this.setState({\n          chartData: {\n            datasets: [{\n              data: [res.data.bomba1, 100 - res.data.bomba1]\n            }]\n          }\n        });\n      } else if (this.props.bomba == \"bomb2\") {\n        this.setState({\n          chartData: {\n            datasets: [{\n              data: [res.data.bomba2, 100 - res.data.bomba2]\n            }]\n          }\n        });\n      } else if (this.props.bomba == \"bomb3\") {\n        this.setState({\n          chartData: {\n            datasets: [{\n              data: [res.data.bomba3, 100 - res.data.bomba3]\n            }]\n          }\n        });\n      } else if (this.props.bomba == \"bomb4\") {\n        this.setState({\n          chartData: {\n            datasets: [{\n              data: [res.data.bomba4, 100 - res.data.bomba4]\n            }]\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    const potencia = this.state.chartData.datasets[0].data[0];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, \" \", this.props.titulo), /*#__PURE__*/React.createElement(Doughnut, {\n      data: this.state.chartData,\n      width: 150,\n      height: 150,\n      options: {\n        maintainAspectRatio: false,\n        cutoutPercentage: 80\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \" Potencia al \", potencia, \"% \"));\n  }\n\n}\n\nexport default Chartconfigactual;","map":{"version":3,"sources":["/home/ubuntu/Integrador2/dashboard/src/pages/dashboard/graphs/Chartconfigactual.js"],"names":["React","Component","Doughnut","axios","Chartconfigactual","constructor","props","colorBomba","state","chartData","labels","datasets","data","backgroundColor","hoverBackgroundColor","componentDidMount","get","then","res","bomba","setState","bomba1","bomba2","bomba3","bomba4","render","potencia","titulo","maintainAspectRatio","cutoutPercentage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\nclass Chartconfigactual extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let colorBomba = '#77FF33';\r\n\r\n        if (this.props.colorBomba != null) {\r\n            colorBomba = this.props.colorBomba;\r\n        }\r\n\r\n        this.state = {\r\n            chartData: {\r\n                labels: [\r\n                    'Potencia actual (%)'\r\n                ],\r\n                datasets: [{\r\n                    data: [100, 100 - 100],\r\n                    backgroundColor: [\r\n                        colorBomba,\r\n                        '#CBCBCB'\r\n                    ],\r\n                    hoverBackgroundColor: [\r\n                        colorBomba,\r\n                        '#CBCBCB'\r\n                    ]\r\n                }]\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get('http://54.90.124.184:8000/api/solutions/')\r\n            .then(res => {\r\n\r\n                if(this.props.bomba == \"bomb1\"){\r\n                    this.setState({\r\n                        chartData: {\r\n                            datasets: [{\r\n                                data: [res.data.bomba1, 100 - res.data.bomba1]\r\n                            }]\r\n                        }\r\n                    });\r\n                }else if(this.props.bomba == \"bomb2\"){\r\n                    this.setState({\r\n                        chartData: {\r\n                            datasets: [{\r\n                                data: [res.data.bomba2, 100 - res.data.bomba2]\r\n                            }]\r\n                        }\r\n                    });\r\n                }else if(this.props.bomba == \"bomb3\"){\r\n                    this.setState({\r\n                        chartData: {\r\n                            datasets: [{\r\n                                data: [res.data.bomba3, 100 - res.data.bomba3]\r\n                            }]\r\n                        }\r\n                    });\r\n                }else if(this.props.bomba == \"bomb4\"){\r\n                    this.setState({\r\n                        chartData: {\r\n                            datasets: [{\r\n                                data: [res.data.bomba4, 100 - res.data.bomba4]\r\n                            }]\r\n                        }\r\n                    });\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const potencia = this.state.chartData.datasets[0].data[0];\r\n        return (\r\n            <div className=\"chart\">\r\n                <h3> {this.props.titulo}</h3>\r\n                <Doughnut\r\n                    data={this.state.chartData}\r\n                    width={150}\r\n                    height={150}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        cutoutPercentage: 80\r\n                    }}\r\n                />\r\n                <h2> Potencia al {potencia}% </h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chartconfigactual;\r\n"]},"metadata":{},"sourceType":"module"}